name: nunchuk-window-x86_64

on:
  push:
    tags:
    - '*'
  workflow_dispatch:
  
jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Check Windows Version
        shell: pwsh
        run: systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v2
        with:
            msbuild-architecture: x64

      - name: Install CMake 3.31.0
        shell: pwsh
        run: |
          $version = "3.31.0"
          $uri = "https://github.com/Kitware/CMake/releases/download/v$version/cmake-$version-windows-x86_64.zip"
          $zipPath = "$env:TEMP\cmake.zip"
          $cmakeDir = "$env:ProgramFiles\CMake"
      
          Invoke-WebRequest -Uri $uri -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath $cmakeDir -Force
      
          $binPath = "$cmakeDir\cmake-$version-windows-x86_64\bin"
          echo "$binPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Check CMake version
        run: cmake --version

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install aqtinstall
        run: |
          pip install aqtinstall
  
      - name: Install Qt 5.15.2 (MSVC 2019)
        run: |
          aqt list-qt windows desktop --modules 5.15.2 win64_msvc2019_64
          aqt install-qt windows desktop 5.15.2 win64_msvc2019_64 --outputdir C:\qt --archives
          aqt install-qt windows desktop 5.15.2 win64_msvc2019_64 `
                      --outputdir C:\qt `
                      -m `
                      qtcharts `
                      qtdatavis3d `
                      qtlottie `
                      qtnetworkauth `
                      qtpurchasing `
                      qtquick3d `
                      qtquicktimeline `
                      qtscript `
                      qtvirtualkeyboard `
                      qtwebengine `
                      qtwebglplugin `
                      debug_info
          Write-Host "Qt installed at: $qtPath\windows\desktop\$qtVersion\msvc2019_64"
      
      - name: Print Qt installation path
        run: |
          echo "Qt installed at: C:\qt\5.15.2\msvc2019_64"
          dir C:\qt\5.15.2\msvc2019_64
          dir C:\qt\5.15.2\msvc2019_64\bin
          echo "QT_DIR=C:\qt\5.15.2\msvc2019_64" >> $GITHUB_ENV
      
      - name: Setup Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.workspace }}/vcpkg
            ${{ runner.workspace }}/vcpkg/installed
          key: vcpkg-full-${{ runner.os }}-${{ github.ref }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            vcpkg-full-${{ runner.os }}-

      - name: Set up vcpkg
        working-directory: ${{ runner.workspace }}
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          echo "Checkout version eb492805e92a2c14a230f5c3deb3e89f6771c321"
          git checkout eb492805e92a2c14a230f5c3deb3e89f6771c321
          .\bootstrap-vcpkg.bat
          
      - name: Install dependencies with vcpkg
        working-directory: ${{ runner.workspace }}
        shell: pwsh
        run: |
          vcpkg\vcpkg.exe install boost:x64-windows `
                                  zeromq:x64-windows `
                                  libevent:x64-windows `
                                  berkeleydb:x64-windows `
                                  sqlite3:x64-windows `
                                  sqlcipher:x64-windows
                        
          vcpkg\vcpkg.exe integrate install
          vcpkg\vcpkg.exe list

      - name: Checkout Olm
        working-directory: ${{ runner.workspace }}
        run: git clone https://gitlab.matrix.org/matrix-org/olm.git
      
      - name: Build Olm
        working-directory: ${{ runner.workspace }}/olm
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          
      - name: Checkout QtKeychain
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://github.com/frankosterfeld/qtkeychain.git
      
      - name: Build QtKeychain
        working-directory: ${{ runner.workspace }}/qtkeychain
        run: |
          cmake -B build -S . `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake `
            -DVCPKG_TARGET_TRIPLET=x64-windows `
            -DCMAKE_INSTALL_PREFIX="C:/qtkeychainInstalled" `
            -DQt5_DIR="C:\Qt\5.15.2\msvc2019_64\lib\cmake\Qt5"
            
          cmake --build build --config Release
          cmake --install build --config Release
          echo "QTKEYCHAIN_PATH=C:/qtkeychainInstalled" >> $GITHUB_ENV
          
      - name: Checkout nunchuk-qt
        working-directory: ${{runner.workspace}}
        env:
          GITLAB_PASS: ${{ secrets.GITLAB_PASS }}
        run: |
          echo -e "machine gitlab.com\n  login hadvluffy\n  password $GITLAB_PASS" >~/.netrc
          TARGET_BRANCH="fixbug"
          echo "BUILD_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV
          echo "Cloning fresh repository"
          rm -rf nunchuk-qt
          git clone -b $TARGET_BRANCH https://gitlab.com/nunchuck/nunchuck-qt nunchuk-qt
          cd nunchuk-qt
          git fetch --all --tags --force
          git submodule sync --recursive
          git submodule update --init --recursive
          echo "Latest commit ----->>>>> $(git rev-parse HEAD)"
          echo "LAST_COMMITID=$(git rev-parse HEAD)" >> $GITHUB_ENV
          LATEST_TAG=$(git for-each-ref --sort=-taggerdate --format '%(refname:short)' refs/tags | head -n 1)
          CURRENT_COMMIT=$(git rev-parse HEAD)
          TAGGED_COMMIT=$(git rev-list -n 1 $LATEST_TAG)
          echo "Latest tag found: $LATEST_TAG (commit $TAGGED_COMMIT)"
          echo "Current commit: $CURRENT_COMMIT"
          echo "LATEST_VERSION=$LATEST_TAG" >> $GITHUB_ENV
          
      - name: Generate build timestamp
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "Timestamp: $TIMESTAMP"
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

      - name: Check environment variants
        id: set-timestamp
        run: |
          echo "Timestamp build :>>> ${{ env.TIMESTAMP }}"
          echo "Version target build :>>> ${{ env.LATEST_VERSION }}"
          echo "Commit target build :>>> ${{ env.LAST_COMMITID }}"
          echo "Branch target build :>>> ${{ env.BUILD_BRANCH }}"
          
      - name: Build nunchuk-qt
        shell: pwsh
        env:
          toolchainFile: C:\a\macdeploynunchuk\vcpkg\scripts\buildsystems\vcpkg.cmake
          project_path: ${{ runner.workspace }}\nunchuk-qt
          build_mode: Release
        run: |
          $cmakeConfigureCmd = @(
              "-B", "build",
              "-S", "$env:project_path",
              "-DCMAKE_BUILD_TYPE=$env:build_mode",
              "-DCMAKE_TOOLCHAIN_FILE=$env:toolchainFile",
              "-DVCPKG_TARGET_TRIPLET=x64-windows",
              "-DUR__DISABLE_TESTS=ON",
              "-DCMAKE_PREFIX_PATH="${{ env.QTKEYCHAIN_PATH }};${{ env.QT_DIR }}"
          )
          Write-Host "--------> cmake $($cmakeConfigureCmd -join ' ')"
          cmake @cmakeConfigureCmd
          
          $cmakeBuildCmd = @(
              "--build", 
              "build", 
              "--config", 
              "$env:build_mode", 
              "--",
              "/m:$env:NUMBER_OF_PROCESSORS"
          )
          Write-Host "--------> cmake $($cmakeBuildCmd -join ' ')"
          cmake @cmakeBuildCmd
