name: nunchuk-window-x86_64

on:
  push:
    tags:
    - '*'
  workflow_dispatch:
  
jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      #- name: Set CPU cores as env variable
      #  run: |
      #    echo "CORES=$(nproc --all)" >> $GITHUB_ENV
      #    echo "Using $CORES cores for build"
        
      - name: Check Windows Version
        shell: pwsh
        run: systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v2
        with:
            msbuild-architecture: x64

      - name: Setup CMake
        uses: lukka/get-cmake@latest

      - name: Setup Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: ${{ runner.workspace }}/vcpkg
          key: vcpkg-full-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            vcpkg-full-${{ runner.os }}-

      - name: Set up vcpkg
        working-directory: ${{ runner.workspace }}
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          #echo "Checkout version eb492805e92a2c14a230f5c3deb3e89f6771c321"
          #git checkout eb492805e92a2c14a230f5c3deb3e89f6771c321
          .\bootstrap-vcpkg.bat

      - name: Install dependencies with vcpkg
        working-directory: ${{ runner.workspace }}
        shell: pwsh
        run: |
          vcpkg\vcpkg.exe install boost:x64-windows `
                                  zeromq:x64-windows `
                                  libevent:x64-windows `
                                  berkeleydb:x64-windows `
                                  sqlite3:x64-windows `
                                  sqlcipher:x64-windows `
                                  qt5:x64-windows `
                                  qt5-graphicaleffects:x64-windows `
                                  qt5-quickcontrols:x64-windows `
                                  qtKeychain:x64-windows
                        
          vcpkg\vcpkg.exe integrate install
          vcpkg\vcpkg.exe list
          
      - name: Checkout Olm
        working-directory: ${{ runner.workspace }}
        run: git clone https://gitlab.matrix.org/matrix-org/olm.git

      - name: Build Olm
        working-directory: ${{ runner.workspace }}/Olm
        run: |
          mkdir -p build
          cd build
          cmake ../
          cmake --build . --config Release -j4

      - name: Checkout nunchuk-qt
        working-directory: ${{runner.workspace}}
        env:
          GITLAB_PASS: ${{ secrets.GITLAB_PASS }}
        run: |
          Set-Content -Path "$HOME/.netrc" -Value "machine gitlab.com`n  login hadvluffy`n  password $env:GITLAB_PASS"
          git clone -b do-group-wallet https://gitlab.com/nunchuck/nunchuck-qt nunchuk-qt  --depth 1
          cd nunchuk-qt
          git submodule update --init --recursive

      - name: Configure nunchuk-qt
        working-directory: ${{ runner.workspace }}
        shell: pwsh
        run: |
          $workspace = "${{ runner.workspace }}"
          $cmakeConfigureCmd = @(
              "-S", 
              "$workspace\nunchuk-qt",
              "-B", 
              "build",
              "-DCMAKE_BUILD_TYPE=Release",
              "-DCMAKE_TOOLCHAIN_FILE=$workspace\vcpkg\scripts\buildsystems\vcpkg.cmake",
              "-DVCPKG_TARGET_TRIPLET=x64-windows",
              "-DUR__DISABLE_TESTS=ON",
              "-DCMAKE_CXX_FLAGS=-U BOOST_ASIO_NO_DEPRECATED"
          )
          cmake @cmakeConfigureCmd
          
      - name: Build nunchuk-qt
        working-directory: ${{ runner.workspace }}
        shell: pwsh
        run: |
          $cmakeBuildCmd = @(
            "--build",  
            "build", 
            "--config", 
            "Release", 
            "--",
            "/m:4"
          )
          cmake $cmakeBuildCmd


