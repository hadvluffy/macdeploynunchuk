name: nunchuk-ubuntu-x86_64
on:
  push:
    tags:
    - '*'
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ubuntu-24.04-apt-${{ runner.os }}-${{ hashFiles('**/dependencies.txt') }}
          restore-keys: |
            ubuntu-24.04-apt-${{ runner.os }}-

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake \
                              g++ \
                              make \
                              ninja-build \
                              libboost-all-dev \
                              libzmq3-dev \
                              libevent-dev \
                              libdb++-dev \
                              sqlite3 \
                              libsqlite3-dev \
                              qtbase5-dev \
                              qtdeclarative5-dev \
                              qtquickcontrols2-5-dev \
                              qtmultimedia5-dev \
                              qttools5-dev \
                              qttools5-dev-tools \
                              qt5-qmake \
                              qtchooser \
                              libqt5svg5-dev \
                              libqt5networkauth5-dev \
                              libsecret-1-dev \
                              git \
                              dpkg-dev \
                              fuse
                              
      - name: Install cqtdeployer tools
        working-directory: ${{runner.workspace}}
        run: |
          wget https://github.com/QuasarApp/CQtDeployer/releases/download/v1.6.2365/CQtDeployer_1.6.2365.7cce7f3_Linux_x86_64.deb
          sudo dpkg -i CQtDeployer_1.6.2365.7cce7f3_Linux_x86_64.deb
          cqtdeployer v

      - name: Install GCC 14
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update
          sudo apt install -y gcc-14 g++-14
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100

      - name: Set environment variables
        run: |
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
          echo "RANLIB=gcc-ranlib-14" >> $GITHUB_ENV
          echo "AR=gcc-ar-14" >> $GITHUB_ENV
          echo "NM=gcc-nm-14" >> $GITHUB_ENV

      - name: Verify GCC version
        run: gcc --version
      
      - name: Verify G++ version
        run: g++ --version

      - name: Cache qtkeychain
        uses: actions/cache@v4
        with:
          path: ${{ runner.workspace }}/qtkeychain
          key: qtkeychain-${{ runner.os }}-${{ hashFiles('qtkeychain/**') }}
          restore-keys: |
            qtkeychain-${{ runner.os }}-

      - name: Checkout, Build & Install qtkeychain
        working-directory: ${{ runner.workspace }}
        run: |
          if [ ! -d "qtkeychain/.git" ]; then
            echo "Cloning qtkeychain repository..."
            rm -rf qtkeychain
            git clone https://github.com/frankosterfeld/qtkeychain.git
          else
            echo "Using cached qtkeychain repository"
          fi
          
          cd qtkeychain
          echo "Latest commit: $(git show HEAD --oneline)"
          
          if [ ! -d "build" ]; then
            echo "Building qtkeychain from source..."
            mkdir -p build
            cd build
            cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
          else
            echo "Using cached qtkeychain build"
            cd build
          fi
          
          # CÃ i Ä‘áº·t qtkeychain
          sudo make install
          sudo ldconfig

      - name: Cache Olm
        uses: actions/cache@v4
        with:
          path: ${{ runner.workspace }}/olm
          key: olm-${{ runner.os }}-${{ hashFiles('olm/**') }}
          restore-keys: |
            olm-${{ runner.os }}-
            
      - name: Checkout, Build & Install Olm
        working-directory: ${{ runner.workspace }}
        run: |
          if [ ! -d "olm/.git" ]; then
            echo "Cloning Olm repository..."
            rm -rf olm
            git clone https://gitlab.matrix.org/matrix-org/olm.git
          else
            echo "Using cached Olm repository"
          fi
          
          cd olm
          echo "Latest commit: $(git show HEAD --oneline)"
          
          if [ ! -d "build" ]; then
            echo "Building Olm from source..."
            mkdir -p build
            cd build
            cmake ..
            make -j$(nproc)
          else
            echo "Using cached Olm build"
            cd build
          fi
          
          sudo make install
          sudo ldconfig

      - name: Cache nunchuk-qt source
        uses: actions/cache@v4
        with:
          path: ${{ runner.workspace }}/nunchuk-qt
          key: nunchuk-qt-${{ runner.os }}-${{ github.ref }}
          restore-keys: |
            nunchuk-qt-${{ runner.os }}-

      - name: Checkout nunchuk-qt
        working-directory: ${{ runner.workspace }}
        env:
          GITLAB_PASS: ${{ secrets.GITLAB_PASS }}
        run: |
          echo -e "machine gitlab.com\n  login hadvluffy\n  password $GITLAB_PASS" > ~/.netrc
          chmod 600 ~/.netrc
          if [ -d "nunchuk-qt/.git" ]; then
            echo "Using cached repository"
            cd nunchuk-qt
            git reset --hard
            git clean -fdx
            git fetch origin do-group-wallet
            git checkout do-group-wallet
            git pull origin do-group-wallet
          else
            echo "Cloning fresh repository"
            git clone -b do-group-wallet https://gitlab.com/nunchuck/nunchuck-qt nunchuk-qt
            cd nunchuk-qt
          fi
          git submodule update --init --recursive
          echo "Latest commit: $(git show HEAD --oneline)"

      - name: Remove default openssl
        run: |
          sudo mv /usr/include/x86_64-linux-gnu/openssl /usr/include/x86_64-linux-gnu/openssl_bak
          
      - name: Build openssl
        working-directory: ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/openssl
        run: |
          source ~/.bashrc
          ./config --prefix="$PWD/lib"
          make -j$(nproc)
          make install_dev

      - name: Configure nunchuk-qt
        working-directory: ${{ runner.workspace }}/nunchuk-qt
        run: |
          mkdir -p build
          cd build
          echo $CXXFLAGS
          echo $LDFLAGS
          cmake .. -DCMAKE_BUILD_TYPE=Release -DUR__DISABLE_TESTS=ON

      - name: Build nunchuk-qt
        working-directory: ${{ runner.workspace }}/nunchuk-qt/build
        run: make -j$(nproc)

      - name: Check linked libraries
        working-directory: ${{ runner.workspace }}/nunchuk-qt/build
        run: |
          ldd ./nunchuk-qt || echo "Library dependencies check failed!"

      - name: Get latest tag of nunchuk-qt
        working-directory: ${{runner.workspace}}/nunchuk-qt
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Latest tag: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      #- name: Download logo
      #  working-directory: ${{runner.workspace}}
      #  run: |
      #    curl -L -o nunchuk-qt.png https://raw.githubusercontent.com/hadvluffy/macdeploynunchuk/main/nunchuk-qt.png
      #    ls -l

      #- name: Install AppImage tools
      #  working-directory: ${{runner.workspace}}
      #  run: |
      #    wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
      #    chmod +x appimagetool-x86_64.AppImage
      #    ls -l
          
      - name: Deploy nunchuk-qt
        working-directory: ${{ runner.workspace }}
        run: |
          OUTPUT_DIR="nunchuk-linux-v${{ env.LATEST_TAG }}/Appdir"
          EXECUTION_PATH="${{ runner.workspace }}/nunchuk-qt/build/nunchuk-qt"
          mkdir -p $OUTPUT_DIR
          
          cqtdeployer -bin $EXECUTION_PATH \
                      -qmake /usr/lib/qt5/bin/qmake \
                      -qmlDir nunchuk-qt \
                      -targetDir $OUTPUT_DIR \
                      -noTranslation true \
                      -noSystemLibraries true \
                      -noStrip true
          
          patchelf --set-rpath '$ORIGIN/../lib' $OUTPUT_DIR/bin/nunchuk-qt
          echo "RPATH set to: $(patchelf --print-rpath $OUTPUT_DIR/bin/nunchuk-qt)"
      
      - name: Collect other dependences
        working-directory: ${{ runner.workspace }}
      #  env:
      #    NUNCHUK_LOGO: ${{runner.workspace}}/nunchuk-qt.png
        run: |
          OUTPUT_DIR="nunchuk-linux-v${{ env.LATEST_TAG }}/Appdir"
          EXECUTION_PATH=$OUTPUT_DIR/bin/nunchuk-qt
          
          # Copy libraries (except Qt)
          ldd $OUTPUT_DIR/bin/nunchuk-qt | awk '{print $3}' | grep -v '^(' | while read lib; do
              if [[ "$lib" != *"/libQt"* && "$lib" != *"/Qt"* ]]; then
                  if [ -f "$lib" ]; then
                      echo "ðŸ“Œ Copying $(basename "$lib") from $lib to $OUTPUT_DIR/lib/"
                      cp -a "$lib" "$OUTPUT_DIR/lib/"
                  fi
              fi
          done
          
      - name: Zip release package
        working-directory: ${{ runner.workspace }}
        run: |
          final_dir="nunchuk-linux-v${{ env.LATEST_TAG }}"
          final_zip="nunchuk-linux-v${{ env.LATEST_TAG }}.zip"
          zip -r "$final_zip" "$final_dir"
          echo "Release package created."

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nunchuk-linux-v${{ env.LATEST_TAG }}
          path: ${{ runner.workspace }}/nunchuk-linux-v${{ env.LATEST_TAG }}.zip

