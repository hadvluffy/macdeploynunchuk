name: nunchuk-ubuntu-x86_64
on:
  push:
    tags:
    - '*'
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ubuntu-24.04-apt-${{ runner.os }}-${{ hashFiles('**/dependencies.txt') }}
          restore-keys: |
            ubuntu-24.04-apt-${{ runner.os }}-

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake \
                              g++ \
                              make \
                              ninja-build \
                              libboost-all-dev \
                              libzmq3-dev \
                              libevent-dev \
                              libdb++-dev \
                              sqlite3 \
                              libsqlite3-dev \
                              qtbase5-dev \
                              qtdeclarative5-dev \
                              qtquickcontrols2-5-dev \
                              qtmultimedia5-dev \
                              qttools5-dev \
                              qttools5-dev-tools \
                              libqt5svg5-dev \
                              libqt5networkauth5-dev \
                              libsecret-1-dev \
                              git \
                              dpkg-dev

      - name: Install GCC 14
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update
          sudo apt install -y gcc-14 g++-14
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100

      - name: Set environment variables
        run: |
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
          echo "RANLIB=gcc-ranlib-14" >> $GITHUB_ENV
          echo "AR=gcc-ar-14" >> $GITHUB_ENV
          echo "NM=gcc-nm-14" >> $GITHUB_ENV

      - name: Verify GCC version
        run: gcc --version
      
      - name: Verify G++ version
        run: g++ --version
      
      - name: Build and Install qtkeychain
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://github.com/frankosterfeld/qtkeychain.git
          cd qtkeychain
          mkdir build && cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Checkout Olm
        working-directory: ${{ runner.workspace }}
        run: git clone https://gitlab.matrix.org/matrix-org/olm.git

      - name: Build Olm
        working-directory: ${{ runner.workspace }}/olm
        run: |
          mkdir -p build
          cd build
          cmake ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Checkout nunchuk-qt
        working-directory: ${{ runner.workspace }}
        env:
          GITLAB_PASS: ${{ secrets.GITLAB_PASS }}
        run: |
          echo -e "machine gitlab.com\n  login hadvluffy\n  password $GITLAB_PASS" > ~/.netrc
          chmod 600 ~/.netrc
          #git clone -b do-group-wallet https://gitlab.com/nunchuck/nunchuck-qt nunchuk-qt --depth 1
          git clone -b do-group-wallet https://gitlab.com/nunchuck/nunchuck-qt nunchuk-qt
          cd nunchuk-qt
          git submodule update --init --recursive

      - name: Remove default openssl
        run: |
          sudo mv /usr/include/x86_64-linux-gnu/openssl /usr/include/x86_64-linux-gnu/openssl_bak
          
      - name: Build openssl
        working-directory: ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/openssl
        run: |
          source ~/.bashrc
          ./config --prefix="$PWD/lib"
          make -j$(nproc)
          make install_dev

      - name: Configure nunchuk-qt
        working-directory: ${{ runner.workspace }}/nunchuk-qt
        run: |
          mkdir -p build
          cd build
          echo $CXXFLAGS
          echo $LDFLAGS
          #cmake .. -DCMAKE_BUILD_TYPE=Release -DUR__DISABLE_TESTS=ON
          cmake .. -DCMAKE_BUILD_TYPE=Release \
                   -DUR__DISABLE_TESTS=ON

      - name: Build nunchuk-qt
        working-directory: ${{ runner.workspace }}/nunchuk-qt/build
        run: make -j$(nproc)

      - name: Check linked libraries
        working-directory: ${{ runner.workspace }}/nunchuk-qt/build
        run: |
          ldd ./nunchuk-qt || echo "Library dependencies check failed!"

      - name: Deploy to release folder
        working-directory: ${{ runner.workspace }}/nunchuk-qt/build
        run: |
          mkdir -p ${{ runner.workspace }}/nunchuk-linux
          cp -r * ${{ runner.workspace }}/nunchuk-linux
          echo "Packaging release completed."

      - name: Get latest tag of nunchuk-qt
        working-directory: ${{runner.workspace}}/nunchuk-qt
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Latest tag: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Download logo
        working-directory: ${{runner.workspace}}
        run: |
          curl -L -o entitlements_hwi.plist https://raw.githubusercontent.com/hadvluffy/macdeploynunchuk/main/nunchuk-qt.png

      - name: Install AppImage tools
        run: |
          sudo apt install -y fuse
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: Package as AppImage
        working-directory: ${{ runner.workspace }}/nunchuk-qt/build
        env:
          NUNCHUK_LOGO: ${{runner.workspace}}/nunchuk-qt.png
        run: |
          OUTPUT_DIR="${{ runner.workspace }}/nunchuk-linux-v${{ env.LATEST_TAG }}"
          mkdir -p $OUTPUT_DIR/AppDir/usr/bin
          cp ./nunchuk-qt $OUTPUT_DIR/AppDir/usr/bin/
          chmod +x $OUTPUT_DIR/AppDir/usr/bin/nunchuk-qt
          mkdir -p $OUTPUT_DIR/AppDir/usr/lib
          
          OUTPUT_LIB=$OUTPUT_DIR/AppDir/usr/lib
          echo "ðŸ“Œ Copy libstdc++ and libgcc..."
          # Copy libstdc++ and libgcc (Ä‘Ãºng phiÃªn báº£n build)
          LIBSTDCXX_PATH=$(gcc --print-file-name=libstdc++.so.6)
          LIBGCC_PATH=$(gcc --print-file-name=libgcc_s.so.1)
          cp -a "$LIBSTDCXX_PATH"* $OUTPUT_LIB/
          cp -a "$LIBGCC_PATH"* $OUTPUT_LIB/
          
          # Copy libolm (Olm library)
          echo "ðŸ“Œ Copying libolm..."
          cp -a /usr/local/lib/libolm.so* $OUTPUT_LIB/

          # Copy libqtkeychain (QtKeychain)
          echo "ðŸ“Œ Copying libqtkeychain..."
          cp -a /usr/lib/x86_64-linux-gnu/libqt5keychain.so* $OUTPUT_LIB/
          
          # Copy logo
          mkdir -p $OUTPUT_DIR/AppDir/usr/share/icons/hicolor/256x256/apps
          cp ${{ env.NUNCHUK_LOGO }} $OUTPUT_DIR/AppDir/usr/share/icons/hicolor/256x256/apps/nunchuk.png

          # Create .desktop file
          echo "[Desktop Entry]
          Name=Nunchuk
          Exec=nunchuk-qt
          Icon=nunchuk
          Type=Application
          Categories=Utility;" > $OUTPUT_DIR/AppDir/nunchuk.desktop

          # Fix missing library links
          patchelf --set-rpath '$ORIGIN/../lib' $OUTPUT_DIR/AppDir/usr/bin/nunchuk-qt
          
          export ARCH=x86_64
          ./linuxdeploy-x86_64.AppImage --appdir=$OUTPUT_DIR/AppDir --output appimage
          mv Nunchuk-*.AppImage $OUTPUT_DIR/nunchuk-linux-v${{ env.LATEST_TAG }}.AppImage

      #- name: Deploy to release folder
      #  working-directory: ${{ runner.workspace }}/nunchuk-qt/build
      #  run: |
      #    mkdir -p ${{ runner.workspace }}/nunchuk-linux-v${{ env.LATEST_TAG }}
      #    cp -r * ${{ runner.workspace }}/nunchuk-linux-v${{ env.LATEST_TAG }}
      #    echo "Deployment completed."

      - name: Zip release package
        working-directory: ${{ runner.workspace }}
        run: |
          zip -r nunchuk-linux-v${{ env.LATEST_TAG }}.zip nunchuk-linux-v${{ env.LATEST_TAG }}
          echo "Release package created."

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nunchuk-linux-v${{ env.LATEST_TAG }}
          path: ${{ runner.workspace }}/nunchuk-linux-v${{ env.LATEST_TAG }}.zip

