name: nunchuk-ubuntu-x86_64
on:
  push:
    tags:
    - '*'
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Download logo
        working-directory: ${{runner.workspace}}
        run: |
          curl -L -o nunchuk-qt.png https://raw.githubusercontent.com/hadvluffy/macdeploynunchuk/main/nunchuk-qt.png
          ls -l
                    
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt install -y cmake \
                              g++ \
                              make \
                              ninja-build \
                              libboost-all-dev \
                              libzmq3-dev \
                              libevent-dev \
                              libdb++-dev \
                              sqlite3 \
                              libsqlite3-dev \
                              libsecret-1-dev \
                              git \
                              dpkg-dev \
                              python3-pip \
                              fuse \
                              libgl-dev \
                              libglu-dev \
                              mesa-common-dev \
                              libpulse-dev \
                              libxcb-xinerama0
      
      - name: Install aqtinstall
        run: |
          pip install aqtinstall
          
      - name: Install Qt 5.15.2
        run: |
          aqt list-qt linux desktop
          QT_VERSION=5.15.2
          QT_INSTALL_DIR=$HOME/Qt
          echo "aqt list-qt linux desktop --modules 5.15.2 gcc_64"
          aqt list-qt linux desktop --modules 5.15.2 gcc_64
          aqt install-qt linux desktop $QT_VERSION gcc_64 --outputdir "$QT_INSTALL_DIR"
          aqt install-qt linux desktop $QT_VERSION gcc_64 --outputdir "$QT_INSTALL_DIR" \
                                                          --modules qtcharts \
                                                                    qtdatavis3d \
                                                                    qtlottie \
                                                                    qtnetworkauth \
                                                                    qtpurchasing \
                                                                    qtquick3d \
                                                                    qtquicktimeline \
                                                                    qtscript \
                                                                    qtvirtualkeyboard \
                                                                    qtwaylandcompositor \
                                                                    qtwebengine \
                                                                    qtwebglplugin \
                                                                    debug_info            
                                                                    
          echo "ls $QT_INSTALL_DIR/5.15.2/gcc_64/lib/cmake/"
          ls $QT_INSTALL_DIR/5.15.2/gcc_64/lib/cmake/
          
          echo "Exporting Qt5_DIR for CMake..."
          echo "QT5_DIR=$QT_INSTALL_DIR/$QT_VERSION/gcc_64/lib/cmake/Qt5" >> $GITHUB_ENV
          echo "QT_INSTALLED_PREFIX=$QT_INSTALL_DIR/$QT_VERSION/gcc_64" >> $GITHUB_ENV

      - name: Checkout, Build & Install qtkeychain
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://github.com/frankosterfeld/qtkeychain.git
          cd qtkeychain
          echo "Latest commit ----->>>>> $(git rev-parse HEAD)"
          echo "Qt5 DIR ----->>>>> ${{ env.QT5_DIR }}"
          rm -rf build
          mkdir build && cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DQt5_DIR=${{ env.QT5_DIR }}
          make -j$(nproc)
          sudo make install
          sudo ldconfig
            
      - name: Checkout, Build & Install Olm
        working-directory: ${{ runner.workspace }}
        run: |
          git clone https://gitlab.matrix.org/matrix-org/olm.git
          cd olm
          git checkout 3.2.16
          cmake --version
          echo "Latest commit ----->>>>> $(git rev-parse HEAD)"
          
          rm -rf build
          mkdir build && cd build
          cmake .. -DCMAKE_POLICY_VERSION_MINIMUM=3.5
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          
      - name: Install cqtdeployer tools
        working-directory: ${{runner.workspace}}
        run: |
          wget https://github.com/QuasarApp/CQtDeployer/releases/download/v1.6.2365/CQtDeployer_1.6.2365.7cce7f3_Linux_x86_64.deb
          sudo dpkg -i CQtDeployer_1.6.2365.7cce7f3_Linux_x86_64.deb
          cqtdeployer v
          
      - name: Install GCC 14
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update
          sudo apt install -y gcc-14 g++-14
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
          
      - name: Set environment variables
        run: |
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
          echo "RANLIB=gcc-ranlib-14" >> $GITHUB_ENV
          echo "AR=gcc-ar-14" >> $GITHUB_ENV
          echo "NM=gcc-nm-14" >> $GITHUB_ENV
          
      - name: Verify GCC version
        run: gcc --version
      
      - name: Verify G++ version
        run: g++ --version
          
      - name: Cache nunchuk-qt source
        uses: actions/cache@v4
        with:
          path: ${{ runner.workspace }}/nunchuk-qt
          key: nunchuk-qt-${{ runner.os }}
          restore-keys: nunchuk-qt-${{ runner.os }}

      - name: Checkout nunchuk-qt
        working-directory: ${{runner.workspace}}
        env:
          GITLAB_PASS: ${{ secrets.GITLAB_PASS }}
        run: |
          echo -e "machine gitlab.com\n  login hadvluffy\n  password $GITLAB_PASS" >~/.netrc
          TARGET_BRANCH="fixbug"
          echo "BUILD_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV
          echo "Cloning fresh repository"
          rm -rf nunchuk-qt
          git clone -b $TARGET_BRANCH https://gitlab.com/nunchuck/nunchuck-qt nunchuk-qt
          cd nunchuk-qt
          git fetch --all --tags --force
          git submodule sync --recursive
          git submodule update --init --recursive
          echo "Latest commit ----->>>>> $(git rev-parse HEAD)"
          echo "LAST_COMMITID=$(git rev-parse HEAD)" >> $GITHUB_ENV
          # Get the latest tag based on the time it was tagged (taggerdate)
          LATEST_TAG=$(git for-each-ref --sort=-taggerdate --format '%(refname:short)' refs/tags | head -n 1)
          CURRENT_COMMIT=$(git rev-parse HEAD)
          TAGGED_COMMIT=$(git rev-list -n 1 $LATEST_TAG)
          echo "Latest tag found: $LATEST_TAG (commit $TAGGED_COMMIT)"
          echo "Current commit: $CURRENT_COMMIT"
          echo "LATEST_VERSION=$LATEST_TAG" >> $GITHUB_ENV

      - name: Generate build timestamp
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "Timestamp: $TIMESTAMP"
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

      - name: Check environment variants
        id: set-timestamp
        run: |
          echo "Timestamp build :>>> ${{ env.TIMESTAMP }}"
          echo "Version target build :>>> ${{ env.LATEST_VERSION }}"
          echo "Commit target build :>>> ${{ env.LAST_COMMITID }}"
          echo "Branch target build :>>> ${{ env.BUILD_BRANCH }}"
          
      - name: Remove default openssl
        run: |
          sudo mv /usr/include/x86_64-linux-gnu/openssl /usr/include/x86_64-linux-gnu/openssl_bak
          
      - name: Build openssl
        working-directory: ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/openssl
        run: |
          source ~/.bashrc
          ./config --prefix="$PWD/lib"
          make -j$(nproc)
          make install_dev
          
      - name: Configure and build nunchuk-qt
        working-directory: ${{ runner.workspace }}/nunchuk-qt
        env:
          OPENSSL_ROOT_DIR: ${{ runner.workspace }}/nunchuk-qt/contrib/libnunchuk/contrib/openssl
        run: |
          mkdir -p build
          cd build
      
          # Load environment variables
          source ~/.bashrc
      
          # Set compiler and linker flags
          export LDFLAGS="$LDFLAGS -L$OPENSSL_ROOT_DIR/lib -lssl -lcrypto"
          export LDFLAGS="$LDFLAGS -static-libgcc -static-libstdc++"
          export CPPFLAGS="$CPPFLAGS -I$OPENSSL_ROOT_DIR/include"
          export CXXFLAGS="$CXXFLAGS -O0 $CPPFLAGS"
          export CFLAGS="$CFLAGS -O0 $CPPFLAGS"
          echo "Using CXX flags: $CXXFLAGS"
          echo "Using Linker flags: $LDFLAGS"
      
          # Run CMake configuration
          cmake .. \
                -DCMAKE_BUILD_TYPE=Release \
                -DUR__DISABLE_TESTS=ON \
                -DRANDLIB=$(which gcc-randlib-14) \
                -DAR=$(which gcc-ar-14) \
                -DNM=$(which gcc-nm-14) \
                -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
                -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
                -DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
                -DCMAKE_PREFIX_PATH="$OPENSSL_ROOT_DIR;${{ env.QT_INSTALLED_PREFIX }}" \
                -DQt5_DIR=${{ env.QT5_DIR }}
          make -j$(nproc)
          
      - name: Deploy nunchuk-qt
        working-directory: ${{ runner.workspace }}
        env:
          NUNCHUK_LOGO: ${{runner.workspace}}/nunchuk-qt.png
        run: |
          OUTPUT_DIR="nunchuk-linux-v${{ env.LATEST_VERSION }}/Appdir"
          EXECUTION_PATH="${{ runner.workspace }}/nunchuk-qt/build/nunchuk-qt"
          mkdir -p $OUTPUT_DIR
          
          cqtdeployer -bin $EXECUTION_PATH \
                      -qmake "${{ env.QT_INSTALLED_PREFIX }}/bin/qmake" \
                      -qmlDir ${{ runner.workspace }}/nunchuk-qt \
                      -targetDir $OUTPUT_DIR \
                      -icon $NUNCHUK_LOGO \
                      noTranslation \
                      noStrip
      
      - name: Collect other dependences
        working-directory: ${{ runner.workspace }}
        run: |
          OUTPUT_DIR="nunchuk-linux-v${{ env.LATEST_VERSION }}/Appdir"
          EXECUTION_PATH=$OUTPUT_DIR/bin/nunchuk-qt
          
          # Copy libraries (except Qt)
          ldd $OUTPUT_DIR/bin/nunchuk-qt | awk '{print $3}' | grep -v '^(' | while read lib; do
              if [[ "$lib" != *"/libQt"* && "$lib" != *"/Qt"* ]]; then
                  if [ -f "$lib" ]; then
                      echo "📌 Copying $(basename "$lib") from $lib to $OUTPUT_DIR/lib/"
                      cp -L "$lib" "$OUTPUT_DIR/lib/"
                      chmod 775 "$OUTPUT_DIR/lib/$(basename "$lib")"
                  fi
              fi
          done

          OPENSSL_LIB_DIR="${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/openssl/lib"
          ls -l "$OPENSSL_LIB_DIR"
          
          for lib_ssl in "$OPENSSL_LIB_DIR"/libssl.so* "$OPENSSL_LIB_DIR"/libcrypto.so*; do
            if [ -f "$lib_ssl" ]; then
                echo "📌 Copying $(basename "$lib_ssl") from $lib_ssl to $OUTPUT_DIR/lib/"
                cp -L "$lib_ssl" "$OUTPUT_DIR/lib/"
                chmod 775 "$OUTPUT_DIR/lib/$(basename "$lib_ssl")"
            fi
          done

          for lib in libcrypto libssl libmd4c libpcre2-16 libdouble-conversion; do
              echo "🔍 Copying $lib..."
              for f in "$QT_ROOT"/${lib}.so*; do
                if [ -f "$f" ]; then
                  echo "📄 Found $f"
                  cp "$f" "$OUTPUT_DIR/"
                  chmod 775 "$OUTPUT_DIR/$(basename "$f")"
                else
                  echo "⚠️ Not found: $f"
                fi
              done
          done
          
          for f in $(find ${{ env.QT_INSTALLED_PREFIX }} -name "libssl.so*" -o -name "libcrypto.so*"); do
            cp "$f" "$OUTPUT_DIR/lib/"
          done
      
          patchelf --set-rpath '$ORIGIN/../lib' $OUTPUT_DIR/bin/nunchuk-qt
          echo "RPATH set to: $(patchelf --print-rpath $OUTPUT_DIR/bin/nunchuk-qt)"

      - name: Download and install HWI
        run: |
          BINDIR="${{ runner.workspace }}/nunchuk-linux-v${{ env.LATEST_VERSION }}/Appdir/bin"
          HWI_URL="https://github.com/bitcoin-core/HWI/releases/download/3.1.0/hwi-3.1.0-linux-x86_64.tar.gz"
          HWI_ARCHIVE="hwi.tar.gz"
      
          echo "Downloading HWI from $HWI_URL"
          wget -q "$HWI_URL" -O "$HWI_ARCHIVE"
      
          echo "Extracting HWI archive..."
          mkdir -p hwi-extracted
          tar -xzf "$HWI_ARCHIVE" -C hwi-extracted
      
          echo "Listing extracted files:"
          ls -l hwi-extracted
      
          echo "Copying HWI binary to $BINDIR..."
          mkdir -p "$BINDIR"
          cp hwi-extracted/hwi "$BINDIR/"
          chmod +x "$BINDIR/hwi"
      
          echo "HWI installed to $BINDIR"
          ls -l "$BINDIR"

      - name: Check linked libraries
        working-directory: ${{ runner.workspace }}/nunchuk-linux-v${{ env.LATEST_VERSION }}/Appdir/bin
        run: |
          ldd ./nunchuk-qt
          
      - name: Create .desktop file
        working-directory: ${{ runner.workspace }}/nunchuk-linux-v${{ env.LATEST_VERSION }}
        run: |
          cat <<EOF > Appdir/nunchuk.desktop
          [Desktop Entry]
          Type=Application
          Name=Nunchuk
          Exec=./nunchuk-qt.sh
          Icon=nunchuk-qt.png
          Categories=Utility;
          EOF
          
      - name: Zip release package
        working-directory: ${{ runner.workspace }}
        run: |
          final_dir="nunchuk-linux-v${{ env.LATEST_VERSION }}"
          final_zip="nunchuk-linux-v${{ env.LATEST_VERSION }}.zip"
          zip -r "$final_zip" "$final_dir"
          echo "Release package created."
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nunchuk-linux-v${{ env.LATEST_VERSION }}
          path: ${{ runner.workspace }}/nunchuk-linux-v${{ env.LATEST_VERSION }}.zip
